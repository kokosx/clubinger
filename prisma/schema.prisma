// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @unique
  email           String
  username        String
  avatarMediaType AvatarMediaType @default(DICEBEAR)
  avatarUrl       String
  participatantAt ClubParticipant[]
  description String @default("")

  favoriteClubs FavoriteClub[]
  chatMessages ChatMessage[]
  createdClubs Club[] @relation("created-club")
  createdPosts Post[]
  liked PostLike[]
  comments PostComment[]
  replies PostCommentReply[]
  likedBookGenres UsersLikedBookGenre[]
  likedMusicGenres UsersLikedMusicGenre[]
  auth_session Session[]
  key          Key[]
}

model UsersLikedBookGenre {
  userId String
  user User @relation(references: [id],fields: [userId],onDelete: Cascade,onUpdate: Cascade)
  bookGenreId Int
  bookGenre BookGenre @relation(references: [id],fields: [bookGenreId],onDelete: Cascade,onUpdate: Cascade)

  @@id([userId,bookGenreId])
}

model UsersLikedMusicGenre {
  userId String
  user User @relation(references: [id],fields: [userId],onDelete: Cascade,onUpdate: Cascade)
  musicGenreId Int
  musicGenre MusicGenre @relation(references: [id],fields: [musicGenreId],onDelete: Cascade,onUpdate: Cascade)

  @@id([userId,musicGenreId])
}


model BookGenre {
  id Int @id @default(autoincrement() )
  name String

  linkedClubs ClubsLinkedBookGenre[]
  likedByUsers UsersLikedBookGenre[]
}

model MusicGenre {
  id Int @id @default(autoincrement() )
  name String

  linkedClubs ClubsLinkedMusicGenre[]
  likedByUsers UsersLikedMusicGenre[]
}

model Club {
  id Int @id @default(autoincrement())
  name String
  description String @default("")
  user User @relation(fields: [createdBy],references: [id],name: "created-club")
  createdBy String
  avatarUrl String
  avatarMediaType AvatarMediaType @default(DICEBEAR)

  favoriteOf FavoriteClub[]
  posts Post[]
  participants ClubParticipant[]
  linkedMusicGenres ClubsLinkedMusicGenre[]
  linkedBookGenres ClubsLinkedBookGenre[]
  chatMessages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id Int @id @default(autoincrement())
  title String
  description String @default("")
  user User @relation(fields: [createdBy],references: [id])
  createdBy String
  club Club @relation(fields: [clubId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  clubId Int
  likes PostLike[]
  comments PostComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostLike {
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  postId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())

  @@id([postId,userId])
}

model PostComment {
  id Int @id @default(autoincrement())
  message String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  postId Int
  user User @relation(fields: [createdBy],references: [id],onDelete:Cascade,onUpdate: Cascade )
  createdBy String
  replies PostCommentReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostCommentReply {
  id Int @id @default(autoincrement())
  message String
  user User @relation(fields: [createdBy],references: [id],onDelete:Cascade,onUpdate: Cascade )
  createdBy String
  postComment PostComment @relation(fields: [postCommentId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  postCommentId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClubParticipant {
  clubId Int
  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  club Club @relation(fields: [clubId],references: [id],onDelete: Cascade,onUpdate: Cascade)

  createdAt DateTime @default(now())

  @@id([userId,clubId])
}

model ChatMessage {
  id Int @id @default(autoincrement())
  message String
  club Club @relation(fields: [clubId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  clubId Int
  user User @relation(fields: [createdBy],references: [id],onUpdate: Cascade,onDelete: Cascade)
  createdBy String
}

model ClubsLinkedBookGenre {
  clubId Int
  club Club @relation(references: [id],fields: [clubId],onDelete: Cascade,onUpdate: Cascade)
  bookGenreId Int
  bookGenre BookGenre @relation(references: [id],fields: [bookGenreId],onDelete: Cascade,onUpdate: Cascade)

  @@id([clubId,bookGenreId])
}

model ClubsLinkedMusicGenre {
  clubId Int
  club Club @relation(references: [id],fields: [clubId],onDelete: Cascade,onUpdate: Cascade)
  musicGenreId Int
  musicGenre MusicGenre @relation(references: [id],fields: [musicGenreId],onDelete: Cascade,onUpdate: Cascade)

  @@id([clubId,musicGenreId])
}

model FavoriteClub {
  user User @relation(fields: [userId],references: [id],onUpdate: Cascade,onDelete: Cascade)
  userId String
  club Club @relation(fields: [clubId],references: [id],onUpdate: Cascade,onDelete: Cascade)
  clubId Int

  @@id([clubId,userId])
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

enum AvatarMediaType {
  DICEBEAR
  IMAGE
}
