// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @unique
  email           String
  username        String
  avatarMediaType AvatarMediaType @default(DICEBEAR)
  avatarUrl       String

  likedBookGenres UsersLikedBookGenre[]
  likedMusicGenres UsersLikedMusicGenre[]
  auth_session Session[]
  key          Key[]
}

model UsersLikedBookGenre {
  userId String
  user User @relation(references: [id],fields: [userId],onDelete: Cascade,onUpdate: Cascade)
  bookGenreId Int
  bookGenre BookGenre @relation(references: [id],fields: [bookGenreId],onDelete: Cascade,onUpdate: Cascade)

  @@id([userId,bookGenreId])
}

model UsersLikedMusicGenre {
  userId String
  user User @relation(references: [id],fields: [userId],onDelete: Cascade,onUpdate: Cascade)
  musicGenreId Int
  bookGenre MusicGenre @relation(references: [id],fields: [musicGenreId],onDelete: Cascade,onUpdate: Cascade)

  @@id([userId,musicGenreId])
}


model BookGenre {
  id Int @id @default(autoincrement() )
  name String

  likedByUsers UsersLikedBookGenre[]
}

model MusicGenre {
  id Int @id @default(autoincrement() )
  name String

  likedByUsers UsersLikedMusicGenre[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

enum AvatarMediaType {
  DICEBEAR
  IMAGE
}
